<script>
    <% if @masquerade %>
      masquerade = true
    <% else %>
      masquerade = false
    <% end %>
    //TODO: woanders? Teil von Webpack?
    <%
      #Schülernamen und Gruppen-Keys verfügbar machen
      groups = {}
      keys = {}

      unless @login.nil?
        @login.students.each do |s|
          groups[s.group_id] ||= []
          groups[s.group_id] += [s]
        end
        @login.group_shares.each do |c|
          keys[c.group_id] = c.key
        end
      end

   %>

    groups = JSON.parse("<%= escape_javascript(raw groups.to_json)%>")
    keys = JSON.parse("<%= escape_javascript(raw keys.to_json)%>")

  //Entschlüsselt einen String mit dem im sessionStorage gespeicherten "Masterkey" und dem Key der Gruppe
    // Falls die Entschlüsselung fehlschlägt, wird der Wert von alt zurückgegeben.
    //TODO only used in recode_keys below
    function decrypt(text, alt, group) {
        //let res = ''
        return text.iv
        try {
            let tempkey = sjcl.decrypt(sessionStorage['login'], keys[group])
            res = sjcl.decrypt(tempkey, text)
        }
        catch(e) {
            console.error(e.toString())
            console.log('Entschlüsselung fehlgeschlagen') //Log-Output (evtl. nicht in Production?)
            res = alt
        }
        return res;
    }

    //Verschlüsselt einen String mit dem im sessionStorage gespeicherten "Masterkey" und dem Key der Gruppe.
    //TODO still used in _password.html.erb and forms.html.erb
    function encrypt(text, group) {
        let tempkey = sjcl.decrypt(sessionStorage.getItem('login'), keys[group])
        return sjcl.encrypt(tempkey, text)
    }

    //Verschlüsselt einen String mit dem im sessionStorage gespeicherten "Masterkey".
    //TODO still used in forms.html.erb
    function encrypt_key(text) {
        if (!text){
            return null
        }
        return sjcl.encrypt(sessionStorage.getItem('login'), text)
    }



    //TODO still used in _password.html.erb
    function recode_keys(new_password) {
        // decrypt keys with current password
        const new_keys = Object.entries(keys).map(k=> ({id: k[0], key:  decrypt_key(k[1])}))

        // update login data
        sessionStorage['old_login'] = sessionStorage['login']
        sessionStorage['login'] = new_password

        // recode with new password, update in global namespace
        keys = Object.entries(keys).map(k=> ({id: k[0], key:  encrypt_key(k[1])}))
    }

    //Namen der Schüler entschlüsseln, evtl. nicht bei jedem Reload?
    // TODO groups and students need to be in global store instead of the global namespace
    if (sessionStorage['login'] != undefined) {
       /* Object.keys(groups).forEach(function(key, index) {
            for (let i = 0; i < this[key].length; ++i)
                this[key][i].name = decrypt(this[key][i].name, 'Kind_' + this[key][i].id, key)
            //Nach Namen sortieren
            this[key].sort(function(a, b){return a.name < b.name ? -1 : a.name > b.name ? 1 : 0})
        }, groups)*/

    }
    else
        if (window.location != "https://www.levumi.de")
          window.location.replace("https://www.levumi.de")     //Ohne Passwort, zurück zum Login (z.B. durch Tab)
</script>
