<style>
  /*Huge thanks to @tobiasahlin at http://tobiasahlin.com/spinkit/ */
  .spinner {
    margin: 100px auto 0;
    width: 70px;
    text-align: center;
  }

  .spinner > div {
    width: 18px;
    height: 18px;
    background-color: #333;

    border-radius: 100%;
    display: inline-block;
    -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;
    animation: sk-bouncedelay 1.4s infinite ease-in-out both;
  }

  .spinner .bounce1 {
    -webkit-animation-delay: -0.32s;
    animation-delay: -0.32s;
  }

  .spinner .bounce2 {
    -webkit-animation-delay: -0.16s;
    animation-delay: -0.16s;
  }

  @-webkit-keyframes sk-bouncedelay {
    0%, 80%, 100% { -webkit-transform: scale(0) }
    40% { -webkit-transform: scale(1.0) }
  }

  @keyframes sk-bouncedelay {
    0%, 80%, 100% {
      -webkit-transform: scale(0);
      transform: scale(0);
    } 40% {
        -webkit-transform: scale(1.0);
        transform: scale(1.0);
      }
  }
</style>



<% if @login_user.hasCapability?('transfer') && (@login_user.transferred.nil?|| !@login_user.transferred) %>
    <div id="transfer">
      <button class="btn-block btn-primary" style ="font-size:20px" onclick="transfer_data()">Daten übertragen!</button>
    </div>
    <br/>
<% end %>

<ul id="tabs" class="nav nav-tabs" role="tablist">
    <li role="presentation" class="active"><a href="#active" aria-controls="active" role="tab" data-toggle="tab">Aktuell</a></li>
    <li role="presentation"><a href="#archive" aria-controls="archive" role="tab" data-toggle="tab">Archiv</a></li>
  </ul>

  <div class="tab-content" style="border-left: 1px solid #e3e3e3; border-right: 1px solid #e3e3e3; border-bottom: 1px solid #e3e3e3; border-radius: 0 0 4px 4px; padding: 19px;">

    <div role="tabpanel" class="tab-pane active" id="active">
        <div class="row">

          <% @groups.each do |group| %>
              <% unless group.archive %>
                  <div class="col-md-4 col-sm-6 col-xs-12">
                    <%= link_to user_group_path(@user, group) do %>
                        <div class="btn btn-default groupButton">
                          <b><%= group.name %></b>
                        </div>
                    <% end %>
                  </div>
              <% end %>
          <% end %>
          <div class="col-md-4 col-sm-6 col-xs-12">
            <div id="newGroup">
              <%= link_to new_user_group_path(@user), :data => {:remote => true} do %>
                  <div class="btn btn-default groupButton">
                    <i>Neue Klasse anlegen</i>
                  </div>
              <% end %>
            </div>
          </div>

        </div>
    </div>

    <div role="tabpanel" class="tab-pane" id="archive">
      <div class="row">
        <% @groups.each do |group| %>
            <% if group.archive %>
                <div class="col-md-4 col-sm-6 col-xs-12">
                  <%= link_to user_group_path(@user, group) do %>
                      <div class="btn btn-default groupButton">
                        <b><%= group.name %></b>
                      </div>
                  <% end %>
                </div>
            <% end %>
        <% end %>
      </div>
    </div>


  </div>
<script>
    var destroyGroup = '<%=@destroyed_group%>'
    if(destroyGroup){
        studentsCrypt = JSON.parse(sessionStorage['students']);
        delete studentsCrypt[destroyGroup];
        sessionStorage['students'] = JSON.stringify(studentsCrypt);
    }

    function transfer_data(){
       $("#transfer").html('    <div id="wait" style="font-size: 20px;margin-top: 1%; text-align: center">' +
            '        Dieser Vorgang kann einen Moment dauern.' +
            '            <div  class="spinner" style="margin: 30px auto 0">' +
            '            <div class="bounce1"></div>' +
            '            <div class="bounce2"></div>' +
            '            <div class="bounce3"></div>' +
            '            </div>' +
            '            </div>');
        var students = JSON.parse(sessionStorage['students']);
        Object.keys(students).forEach(function(keyGroup) {
            var key = createKey();
            students[keyGroup]['key'] = encrypt_key(key);
            students[keyGroup]['token'] = generate_token(key);
            students[keyGroup]['students'] = {};
            Object.keys(students[keyGroup]).forEach(function(keyStudent) {
                if(keyStudent!='key' && keyStudent!='students'&&keyStudent!='token'){
                    students[keyGroup]['students'][keyStudent] = encrypt(students[keyGroup][keyStudent], key);
                    delete students[keyGroup][keyStudent];
                }
            });
        });
        students = JSON.stringify(students);
        $.ajax({
            type: 'POST',
            url:'<%= transfer_data_url %>',
            data:{'data':students},
            success: function(){
                console.log("data send")
            },
            error: function(){
                console.log("error")
            }
        })
    }
    function createKey() {
        return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 6);

    }

    function generate_token(key) {
        return sjcl.encrypt(key, key)
    }


    //Verschlüsselt einen String mit dem im sessionStorage gespeicherten "Masterkey" und dem Key der Gruppe.
    function encrypt(text, key) {
        //var tempkey = sjcl.decrypt(sessionStorage['encryptKey'], key);
        return sjcl.encrypt(key, text);
    }


    //Verschlüsselt einen String mit dem im sessionStorage gespeicherten "Masterkey".
    function encrypt_key(text) {
        return sjcl.encrypt(sessionStorage['encryptKey'], text);
    }


</script>

