<script type="module">
  //Eintrag in der Navleiste markieren
    window.highlightNavItem('navbarKlassenbuch')
    window.showIntro = false  //Wird in ClassBookApp verwendet
</script>

<div id='levumi' data="<%= @data.to_json%>">

  <!-- Spinner -->
  <div v-if='!$data'>
    <div class='spinner'>
      <div class='bounce1'></div>
      <div class='bounce2'></div>
      <div class='bounce3'></div>
    </div>
  </div>

  <class-book-app></class-book-app>
</div>

<% if @login.intro_state < 5 %>
  <script type="module">
      window.showIntro = true
    <%
      texts = [
      'Hier sehen Sie Ihre eigenen Klassen, Klassen die mit Ihnen geteilt wurden und Klassen, die Sie in ihr Archiv verschoben haben. Aktuell gibt es bereits die Beispielklasse, mit der Sie alle Funktionen von Levumi testen können.',
      'Wenn Sie hier klicken, können Sie eine neue Klasse anlegen. Vergeben Sie für die Klasse einen beliebigen Namen.',
      'Wenn Sie mit Klassen nicht mehr länger aktiv arbeiten, können Sie sie in ihr Archiv verschieben. Die Klasse wird nicht mehr unter Diagnostik angezeigt. Sie können Klassen auch wieder aus dem Archiv zurückholen. Probieren Sie das gerne mit Ihrer Beispielklasse aus!',
      'Sie können Ihre Klasse mit anderen Nutzer*innen von Levumi teilen. Sie können dabei festlegen, ob die andere Person auch mit der Klasse arbeiten oder diese nur anschauen darf.',
      'Hier können Sie Schüler:innen für Ihre Klasse anlegen. Sie müssen einen Namen eingeben, die anderen Daten sind optional, helfen uns aber bei der Forschung. Auch das können Sie gleich für die Beispielklasse ausprobieren!',
      'Der Logincode wird vom System vergeben, Sie sehen ihn nach dem Speichern der Schüler:in. Mit diesem Code kann sich ein Kind im Zugang für Schüler:innen einloggen.',
      'Hier können Sie die Schüler:in speichern.'
    ]
    %>

    let selectors = ['#intro_cb_1', '#intro_cb_2', '#intro_cb_3', '#intro_cb_4', '#intro_cb_5', '#intro_cb_6', '#intro_cb_7']
    let textHtml = [
      <% texts.each_with_index do |t, i| %>
      "<%= escape_javascript render 'shared/popover', text: t, last: i == texts.size-1 %>",
      <% end %>
    ]

    let currentPopover = 0

    function next() {

      if (currentPopover > 0) {
          $(selectors[currentPopover-1]).popover('hide')
      }

      if (currentPopover <= selectors.length) {
        const popoverEl = $(selectors[currentPopover]).first()
        let clickHandlerAttached = false
        popoverEl.data('toggle', 'popover')
        popoverEl.data('content', textHtml[currentPopover])
        popoverEl.popover({
            html: true,
            sanitize: false
        })
        popoverEl.popover('show')

        // attach click handler for "Weiter"-button to button in modal content
        popoverEl.on('shown.bs.popover',
          () => {
            if (clickHandlerAttached) {
              return // for reasons, shown.bs.popover occasionally fires twice. If so, don't attach another.
            }

            clickHandlerAttached = true
            $("#popover-next-button").on("click", ()=>{
              if (currentPopover === selectors.length ){
                fetch('/willkommen?classbook=true', {
                  method: 'PATCH',
                  headers: {
                    'Accept': 'text/javascript',
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                  },
                  credentials: 'include',
                }).then(next)
              } else {
                next()
              }
            })
          }
        )
      }
      else {
        for (let i = 0; i < selectors.length; ++i) {
          $(selectors[i]).popover('disable')
        }
      }
      currentPopover++
    }

    $(window).on( "load", function() {next()})

  </script>
<% end %>