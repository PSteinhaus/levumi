<div id="error_message" class="alert alert-danger" role="alert" style="font-size: 1.25em; display: none">
  Verbindungsfehler! Ergebnisse konnten nicht gespeichert werden.
</div>

<!-- Test-Styles einbinden -->
<style>
  <% @test.style_files.each do |f| %>
  <%= raw f.download.force_encoding('UTF-8') %>
  <% end %>
</style>
<!-- Hauptseite rendern -->
<%= raw @test.entry_point.download.force_encoding('UTF-8') %>

<!-- Testskripte laden und Testumgebung definieren -->
<script>
    //Medienpfade für Test bekannt machen (aus ActiveStorage)
    var media_paths = {
        <% @test.media_files.each do |f| %>
        '<%= f.filename %>': '<%= rails_blob_path(f) %>',
        <% end %>
    }

    //Vorheriges Ergebnis als Objekt
    <% unless @result.prior_result.nil? %>
    const lastResult = {
        views: JSON.parse("<%= escape_javascript(raw @result.prior_result.views.to_json) %>"),
        report: JSON.parse("<%= escape_javascript(raw @result.prior_result.report.to_json) %>"),
        data: JSON.parse("<%= escape_javascript(raw @result.prior_result.data.to_json) %>")
    }
    <% else %>
    const lastResult = undefined
    <% end %>

    //Präferenzen des Kindes setzen
    const font_family = '<%= @result.student.get_setting(:font_family) %>'
    const font_size = <%= @result.student.get_setting(:font_size) %>

        //Funktionen für Testumgebung bereitstellen
        function saveResults(views, report, data, callback) {
            let url = '<%= student_result_url(@student, @result)%>'
            let header = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
            }
            let body = 'views=' + encodeURIComponent(JSON.stringify(views)) + '&report=' + encodeURIComponent(JSON.stringify(report)) + '&data=' + encodeURIComponent(JSON.stringify(data))
            fetch(url, {
                method: 'put',
                headers: header,
                credentials: 'include',
                body: body
            })
                .then(function(response){
                    if(!response.ok)
                        throw Error(response.statusText)
                })
                .then(data => callback())
                .catch(error => {
                    //Bei Fehler versuche die Daten nochmal abzuspeichern
                    fetch(url, {
                        method: 'put',
                        headers: header,
                        credentials: 'include',
                        body: body
                    })
                        .then(function(response){
                            if(!response.ok)
                                throw Error(response.statusText)
                        })
                        .then(data => callback())
                        .catch(error => {
                            //Zweimal erfolglos => Fehlermeldung anzeigen
                            $('#error_message').show()
                        })
                })
        }

    //Testfenster schließen
    function exit() {
        window.location.href = '<%= @redirect %>'
    }

    //Hilfsfunktionen

    //Zeitmessen
    var stopwatch = null

    function startTimer() {
        stopwatch = new Date()
    }

    function stopTimer() {
        return (new Date() - stopwatch)
    }

    //zufälliges Umsortieren
    function shuffleArray(array) {
       let j = undefined
        for (let i = array.length - 1; i > 0; --i) {
            j = Math.floor(Math.random() * (i + 1)); //Hier nötig, da ansonsten [ in der nächsten Zeile als Array-Zugriff interpretiert wird...
            [array[i], array[j]] = [array[j], array[i]]
        }
    }

    //Test-Skripte einbinden
    <% @test.script_files.each do |f| %>
    <%= raw f.download.force_encoding('UTF-8') %>
    <% end %>


    //Anzeigen des Feedbacks
    //Erhält zum einen, wie das Ergebnis aufgefasst wird (-1(schlechter), 0(gleich/erstes mal), 1(besser))
    function showFeedback(result, timedout) {
        $('#testspace').html(
            "<div style='text-align: center'>" +
            "<img id='pic' style='width: 300px'/>" +
            "<p style=\"font-family: 'serif'; font-size:1.5em; margin-top: 10%\" id='feedback_text' class='text-center'></p>" +
            "</div>"
        )
        if (result == 0) {
            $('#pic').attr('src', '/images/shared/Levumi-normal.jpg')
        }
        else if (result == 1) {
            $('#pic').attr('src', '/images/shared/Levumi-jubelt.gif')
        }
        else {
            $('#pic').attr('src', '/images/shared/Levumi-liest.gif')
        }
        if (timedout)
            $('#feedback_text').html('Zeit abgelaufen.<br/>Die Testergebnisse wurden gespeichert!<br/>Sie können das Testfenster' +
                ' nun schließen.<br/><br/><button class="btn btn-warning btn-lg " onclick="exit()">Fenster schließen!</button>')
                .css('margin-top','0%')
        else
            $('#feedback_text').html('Alle Items beantwortet.<br/>Die Testergebnisse wurden gespeichert!<br/>Sie können' +
                ' das Testfenster nun schließen.<br/><br/><button class="btn btn-warning btn-lg " onclick="exit()">Fenster schließen!</button>')
                .css('margin-top','0%')
    }

    <%if @test.student_test%>
      //Backspace als "Zurück" verhindern
      window.location.hash = 'no-back-button'
      window.location.hash = 'Again-No-back-button'
      window.onhashchange = function() { window.location.hash = 'no-back-button' }
    <%end%>
</script>